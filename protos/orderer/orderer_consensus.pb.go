// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer/orderer_consensus.proto

package orderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConsensusTransaction struct {
	CreatorId     int64  `protobuf:"varint,1,opt,name=creatorId" json:"creatorId,omitempty"`
	Consensus     bool   `protobuf:"varint,2,opt,name=consensus" json:"consensus,omitempty"`
	Timestamp     int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	AddressId     int64  `protobuf:"varint,4,opt,name=addressId" json:"addressId,omitempty"`
	TxSeq         int64  `protobuf:"varint,5,opt,name=txSeq" json:"txSeq,omitempty"`
	ChainID       string `protobuf:"bytes,6,opt,name=chainID" json:"chainID,omitempty"`
	Payload       []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature     []byte `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	ConfigMessage bool   `protobuf:"varint,9,opt,name=configMessage" json:"configMessage,omitempty"`
}

func (m *ConsensusTransaction) Reset()                    { *m = ConsensusTransaction{} }
func (m *ConsensusTransaction) String() string            { return proto.CompactTextString(m) }
func (*ConsensusTransaction) ProtoMessage()               {}
func (*ConsensusTransaction) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ConsensusTransaction) GetCreatorId() int64 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *ConsensusTransaction) GetConsensus() bool {
	if m != nil {
		return m.Consensus
	}
	return false
}

func (m *ConsensusTransaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ConsensusTransaction) GetAddressId() int64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *ConsensusTransaction) GetTxSeq() int64 {
	if m != nil {
		return m.TxSeq
	}
	return 0
}

func (m *ConsensusTransaction) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ConsensusTransaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ConsensusTransaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ConsensusTransaction) GetConfigMessage() bool {
	if m != nil {
		return m.ConfigMessage
	}
	return false
}

type ConsensusResponse struct {
	Accepted bool `protobuf:"varint,1,opt,name=accepted" json:"accepted,omitempty"`
}

func (m *ConsensusResponse) Reset()                    { *m = ConsensusResponse{} }
func (m *ConsensusResponse) String() string            { return proto.CompactTextString(m) }
func (*ConsensusResponse) ProtoMessage()               {}
func (*ConsensusResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ConsensusResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func init() {
	proto.RegisterType((*ConsensusTransaction)(nil), "orderer.ConsensusTransaction")
	proto.RegisterType((*ConsensusResponse)(nil), "orderer.ConsensusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrdererService service

type OrdererServiceClient interface {
	Consensus(ctx context.Context, in *ConsensusTransaction, opts ...grpc.CallOption) (*ConsensusResponse, error)
}

type ordererServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrdererServiceClient(cc *grpc.ClientConn) OrdererServiceClient {
	return &ordererServiceClient{cc}
}

func (c *ordererServiceClient) Consensus(ctx context.Context, in *ConsensusTransaction, opts ...grpc.CallOption) (*ConsensusResponse, error) {
	out := new(ConsensusResponse)
	err := grpc.Invoke(ctx, "/orderer.OrdererService/Consensus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrdererService service

type OrdererServiceServer interface {
	Consensus(context.Context, *ConsensusTransaction) (*ConsensusResponse, error)
}

func RegisterOrdererServiceServer(s *grpc.Server, srv OrdererServiceServer) {
	s.RegisterService(&_OrdererService_serviceDesc, srv)
}

func _OrdererService_Consensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).Consensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.OrdererService/Consensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).Consensus(ctx, req.(*ConsensusTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrdererService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.OrdererService",
	HandlerType: (*OrdererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consensus",
			Handler:    _OrdererService_Consensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderer/orderer_consensus.proto",
}

func init() { proto.RegisterFile("orderer/orderer_consensus.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xed, 0xe6, 0xb6, 0x36, 0xa8, 0x60, 0xd8, 0x21, 0x0c, 0xc5, 0x32, 0x14, 0x7a, 0x90,
	0x16, 0xf4, 0x1b, 0xa8, 0x07, 0x77, 0x10, 0xa1, 0xd3, 0xcb, 0x2e, 0x92, 0xa5, 0x6f, 0x5d, 0x60,
	0x4b, 0xea, 0x4b, 0x26, 0xee, 0xbb, 0xf8, 0x61, 0xa5, 0xcd, 0xd2, 0x29, 0x7a, 0x4a, 0xfe, 0xff,
	0xdf, 0x7b, 0x79, 0xe4, 0x9f, 0x90, 0x0b, 0x8d, 0x05, 0x20, 0x60, 0xb6, 0x5b, 0xdf, 0x84, 0x56,
	0x06, 0x94, 0xd9, 0x98, 0xb4, 0x42, 0x6d, 0x35, 0x1d, 0xec, 0xc0, 0xf8, 0xab, 0x43, 0x86, 0xf7,
	0x1e, 0xbe, 0x20, 0x57, 0x86, 0x0b, 0x2b, 0xb5, 0xa2, 0x67, 0x24, 0x12, 0x08, 0xdc, 0x6a, 0x9c,
	0x14, 0x2c, 0x88, 0x83, 0xa4, 0x9b, 0xef, 0x8d, 0x86, 0xfa, 0x2e, 0xd6, 0x89, 0x83, 0x24, 0xcc,
	0xf7, 0x46, 0x4d, 0xad, 0x5c, 0x83, 0xb1, 0x7c, 0x5d, 0xb1, 0xae, 0xeb, 0x6d, 0x8d, 0x9a, 0xf2,
	0xa2, 0x40, 0x30, 0x66, 0x52, 0xb0, 0x43, 0x47, 0x5b, 0x83, 0x0e, 0x49, 0xcf, 0x7e, 0x4e, 0xe1,
	0x9d, 0xf5, 0x1a, 0xe2, 0x04, 0x65, 0x64, 0x20, 0x96, 0x5c, 0xaa, 0xc9, 0x03, 0xeb, 0xc7, 0x41,
	0x12, 0xe5, 0x5e, 0xd6, 0xa4, 0xe2, 0xdb, 0x95, 0xe6, 0x05, 0x1b, 0xc4, 0x41, 0x72, 0x94, 0x7b,
	0x59, 0xcf, 0x31, 0xb2, 0x54, 0xdc, 0x6e, 0x10, 0x58, 0xd8, 0xb0, 0xbd, 0x41, 0x2f, 0xc9, 0xb1,
	0xd0, 0x6a, 0x21, 0xcb, 0x27, 0x30, 0x86, 0x97, 0xc0, 0xa2, 0xe6, 0x16, 0xbf, 0xcd, 0x71, 0x46,
	0x4e, 0xdb, 0x74, 0x72, 0x30, 0x55, 0xbd, 0xa7, 0x23, 0x12, 0x72, 0x21, 0xa0, 0xb2, 0xe0, 0x92,
	0x09, 0xf3, 0x56, 0xdf, 0xcc, 0xc8, 0xc9, 0xb3, 0x8b, 0x76, 0x0a, 0xf8, 0x21, 0x05, 0xd0, 0x47,
	0x12, 0xb5, 0x47, 0xd0, 0xf3, 0x74, 0x17, 0x7c, 0xfa, 0x5f, 0xe8, 0xa3, 0xd1, 0x5f, 0xec, 0xa7,
	0x8e, 0x0f, 0xee, 0x5e, 0xc9, 0x95, 0xc6, 0x32, 0x5d, 0x6e, 0x2b, 0xc0, 0x15, 0x14, 0x25, 0x60,
	0xba, 0xe0, 0x73, 0x94, 0xc2, 0x3d, 0xaa, 0xf1, 0xcd, 0xb3, 0xeb, 0x52, 0xda, 0xe5, 0x66, 0x9e,
	0x0a, 0xbd, 0xce, 0x7e, 0x54, 0x67, 0xae, 0x3a, 0x73, 0xd5, 0xfe, 0x6f, 0xcc, 0xfb, 0x8d, 0xbe,
	0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x11, 0x0e, 0xb4, 0x35, 0x02, 0x00, 0x00,
}
