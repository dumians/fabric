// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer/hashgraph.proto

package orderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Transaction struct {
	ChainID       string `protobuf:"bytes,1,opt,name=chainID" json:"chainID,omitempty"`
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature     []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ConfigMessage bool   `protobuf:"varint,4,opt,name=configMessage" json:"configMessage,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Transaction) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetConfigMessage() bool {
	if m != nil {
		return m.ConfigMessage
	}
	return false
}

type CreateResponse struct {
	Accepted bool `protobuf:"varint,1,opt,name=accepted" json:"accepted,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func init() {
	proto.RegisterType((*Transaction)(nil), "orderer.Transaction")
	proto.RegisterType((*CreateResponse)(nil), "orderer.CreateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HashgraphService service

type HashgraphServiceClient interface {
	Create(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*CreateResponse, error)
}

type hashgraphServiceClient struct {
	cc *grpc.ClientConn
}

func NewHashgraphServiceClient(cc *grpc.ClientConn) HashgraphServiceClient {
	return &hashgraphServiceClient{cc}
}

func (c *hashgraphServiceClient) Create(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/orderer.HashgraphService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HashgraphService service

type HashgraphServiceServer interface {
	Create(context.Context, *Transaction) (*CreateResponse, error)
}

func RegisterHashgraphServiceServer(s *grpc.Server, srv HashgraphServiceServer) {
	s.RegisterService(&_HashgraphService_serviceDesc, srv)
}

func _HashgraphService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashgraphServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.HashgraphService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashgraphServiceServer).Create(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _HashgraphService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.HashgraphService",
	HandlerType: (*HashgraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HashgraphService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderer/hashgraph.proto",
}

func init() { proto.RegisterFile("orderer/hashgraph.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4b, 0x4b, 0x3b, 0x31,
	0x14, 0xc5, 0xff, 0xf3, 0x57, 0xfa, 0x88, 0x0f, 0x24, 0x08, 0x1d, 0x8a, 0x8b, 0x61, 0x50, 0x98,
	0x45, 0xc9, 0x80, 0xae, 0xdc, 0xaa, 0x0b, 0x5d, 0x74, 0x33, 0xea, 0xc6, 0xdd, 0x9d, 0xcc, 0x6d,
	0x12, 0xa8, 0x49, 0xb8, 0x49, 0x85, 0x7e, 0x00, 0xbf, 0xb7, 0x38, 0x8f, 0xda, 0x2e, 0xcf, 0x39,
	0xbf, 0xe4, 0xde, 0x73, 0xd9, 0xcc, 0x51, 0x83, 0x84, 0x54, 0x6a, 0x08, 0x5a, 0x11, 0x78, 0x2d,
	0x3c, 0xb9, 0xe8, 0xf8, 0xb8, 0x0f, 0xf2, 0xef, 0x84, 0x9d, 0xbc, 0x11, 0xd8, 0x00, 0x32, 0x1a,
	0x67, 0x79, 0xca, 0xc6, 0x52, 0x83, 0xb1, 0x2f, 0x4f, 0x69, 0x92, 0x25, 0xc5, 0xb4, 0x1a, 0xe4,
	0x6f, 0xe2, 0x61, 0xbb, 0x76, 0xd0, 0xa4, 0xff, 0xb3, 0xa4, 0x38, 0xad, 0x06, 0xc9, 0xaf, 0xd8,
	0x34, 0x18, 0x65, 0x21, 0x6e, 0x08, 0xd3, 0xa3, 0x36, 0xfb, 0x33, 0xf8, 0x35, 0x3b, 0x93, 0xce,
	0xae, 0x8c, 0x5a, 0x62, 0x08, 0xa0, 0x30, 0x3d, 0xce, 0x92, 0x62, 0x52, 0x1d, 0x9a, 0xf9, 0x82,
	0x9d, 0x3f, 0x12, 0x42, 0xc4, 0x0a, 0x83, 0x77, 0x36, 0x20, 0x9f, 0xb3, 0x09, 0x48, 0x89, 0x3e,
	0x62, 0xd3, 0xae, 0x32, 0xa9, 0x76, 0xfa, 0x76, 0xc9, 0x2e, 0x9e, 0x87, 0x46, 0xaf, 0x48, 0x5f,
	0x46, 0x22, 0xbf, 0x67, 0xa3, 0xee, 0x07, 0x7e, 0x29, 0xfa, 0x76, 0x62, 0xaf, 0xd9, 0x7c, 0xb6,
	0x73, 0x0f, 0x07, 0xe5, 0xff, 0x1e, 0xde, 0xd9, 0x8d, 0x23, 0x25, 0xf4, 0xd6, 0x23, 0xad, 0xb1,
	0x51, 0x48, 0x62, 0x05, 0x35, 0x19, 0xd9, 0x5d, 0x2b, 0x0c, 0x2f, 0x3f, 0x16, 0xca, 0x44, 0xbd,
	0xa9, 0x85, 0x74, 0x9f, 0xe5, 0x1e, 0x5d, 0x76, 0x74, 0xd9, 0xd1, 0x65, 0x4f, 0xd7, 0xa3, 0x56,
	0xdf, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x2b, 0xf5, 0xc4, 0x86, 0x01, 0x00, 0x00,
}
